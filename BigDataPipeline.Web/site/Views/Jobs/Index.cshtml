@{
    Layout = Url.Content ("Shared/_Layout.cshtml");
}

<div ng-app="app" ng-controller="mainController" id="mainController" ui-i18n="en">
    <h4>Jobs</h4>

    <div class="separator-8"></div>

    <div id="status" class="alert" ng-hide="status" ng-class="{'alert-success': status, 'alert-danger': !status}">{{ message }}</div>

    <div class="separator-8" ng-hide="status"></div>

    <div class="row">
        <div class="col-sm-12">
            <button class="btn btn-default col-sm-1 margin-right-16" role="button" ng-click="refresh()">Refresh</button>
            <button class="btn btn-default col-sm-1 margin-right-16" role="button" ng-click="addNewJob()">Add</button>
        </div>
    </div>

    <div class="separator-8"></div>

    <div id="dataTableJobs" ui-grid="dataTableJobs" ui-grid-selection ui-grid-auto-resize ui-grid-resize-columns ng-style="getTableJobsHeight()"></div>

    <div class="separator-16"></div>

    <div class="row" id="nav-jobDetails">
        <div class="col-sm-12">
            <div role="tabpanel">
                <!-- Nav tabs -->
                <ul class="nav nav-tabs" role="tablist" id="editAreaNavTabs">
                    <li role="presentation" class="active"><a href="#editAsForm" aria-controls="editAsForm" role="tab" data-toggle="tab">Edit as Form</a></li>
                    <li role="presentation"><a href="#editAsJson" aria-controls="editAsJson" role="tab" data-toggle="tab">Edit as Json</a></li>
                </ul>

                <!-- Tab panes -->
                <div class="tab-content">
                    <div role="tabpanel" class="tab-pane active" id="editAsForm">
                        <div class="separator-8"></div>
                        <h3>Job details</h3>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="form-group">
                                    Name:<br />
                                    <input type="text" class="form-control" ng-model="selectedJob.Name" />
                                </div>
                                <div class="form-group">
                                    Group:<br />
                                    <input type="text" class="form-control" ng-model="selectedJob.Group" />
                                </div>
                                <div class="form-group">
                                    Last Execution date/time:<br />
                                    <input type="text" class="form-control" ng-model="selectedJob.LastExecution" readonly />
                                </div>
                            </div>

                            <div class="col-sm-6">
                                <div class="form-group">
                                    Description:<br />
                                    <textarea class="form-control" rows="10" ng-model="selectedJob.Description"></textarea>
                                </div>
                            </div>
                        </div>

                        <hr>
                        <h3>Job execution triggers</h3>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="form-group" title="Enable/disable this job execution." ng-class="{'text-primary': selectedJob.Enabled, 'bg-danger': !selectedJob.Enabled}">
                                    <div class="checkbox">
                                        <label><input type="checkbox" ng-model="selectedJob.Enabled" /> Is Enabled ?</label>
                                    </div>
                                </div>
                            </div>

                            <div class="col-sm-6">
                                <div class="form-group" title="When will be the next execution of this job?">
                                    Next Scheduled Execution:<br />
                                    <div class="dropdown">
                                        <a class="dropdown-toggle" id="dropdown2" role="button" data-toggle="dropdown" data-target="#" href="#">
                                            <div class="input-group">
                                                <input type="text" class="form-control" data-ng-model="selectedJob.NextExecution"><span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                            </div>
                                        </a>
                                        <ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
                                            <datetimepicker data-ng-model="selectedJob.NextExecution" data-datetimepicker-config="{ dropdownSelector: '#dropdown2' }"></datetimepicker>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="form-group" title="When this job will be executed">
                                    Job Scheduler: <button class="btn btn-default btn-sm" role="button" ng-click="addNewScheduler()"><i class="fa fa-plus"></i></button>
                                    <div class="separator-4"></div>

                                    <ul class="list-unstyled">
                                        <li ng-repeat="cron in selectedJob.Scheduler track by $index">
                                            <div class="form-group">
                                                <div class="input-group">
                                                    <input type="text" class="form-control" ng-model="selectedJob.Scheduler[$index]" data-index="{{ $index }}" />
                                                    <span class="input-group-btn">
                                                        <button class="btn btn-default" type="button" ng-click="editCronScheduler($index)"><i class="fa fa-pencil-square-o"></i></button>
                                                        <button class="btn btn-default" type="button" ng-click="removeScheduler($index)"><i class="fa fa-trash-o text-danger"></i></button>
                                                    </span>
                                                </div>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                            </div>

                            <div class="col-sm-6">
                                <div class="form-group">
                                    Events: <button class="btn btn-default btn-sm" role="button" ng-click="addJobEvent()"><i class="fa fa-plus"></i></button>
                                    <div class="separator-4"></div>

                                    <ul class="list-unstyled">
                                        <li ng-repeat="cron in selectedJob.Events track by $index">
                                            <div class="form-group">
                                                <div class="input-group">
                                                    <input type="text" class="form-control" ng-model="selectedJob.Events[$index]" />
                                                    <span class="input-group-btn">
                                                        <button class="btn btn-default" type="button" ng-click="removeJobEvent($index)"><i class="fa fa-trash-o text-danger"></i></button>
                                                    </span>
                                                </div>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>

                        <hr>
                        <h3>Job settings</h3>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="alert alert-warning">Not implemented!</div>
                            </div>
                        </div>

                        <hr>
                        <h3>Initial Action</h3>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="form-group">
                                    Module:<br />
                                    <input type="hidden" class="width-full" ng-select2-bind ng-model="selectedJob.RootAction.Module" select2-query="modules.getNames()" allow-clear placeholder="Select a module..." />
                                </div>
                                <div class="form-group">
                                    Action Options:<br />
                                    <div class="alert alert-warning">Not implemented!</div>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="form-group">
                                    Selected Module Details<br />

                                    <textarea class="form-control" rows="8" ng-model="modules.selectedText" readonly></textarea>

                                    <div class="separator-4"></div>

                                    <ul>
                                        <li ng-repeat="item in modules.selectedParameters track by $index">
                                            {{item}}
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>

                        <hr>
                        <h3>Subsequent Actions</h3>

                        <div class="row">
                            <div class="col-sm-6">
                                <div class="alert alert-warning">Not implemented!</div>
                            </div>
                        </div>




                    </div>

                    <div role="tabpanel" class="tab-pane" id="editAsJson">
                        <div class="separator-8"></div>

                        <h3>
                            JSON editor
                            <button class="btn btn-default pull-right" role="button" ng-click="parseJobFromText()">Check Syntax</button>
                        </h3>

                        <textarea class="form-control" rows="30" ng-model="jobTextContent"></textarea>

                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="separator-8"></div>

    <div class="form-group">
        <button class="btn btn-default col-sm-1 pull-right" role="button" ng-click="saveCurrentJob()">Save</button>
    </div>

    <!-- Hidden stuff -->
    <div style="display: none;">
        <div id="addNewJobDialog" style="width:400px;">
            <div class="container-fluid bottom_margin_10">
                <div class="form-group">
                    New Job Name:<br />
                    <input type="text" class="form-control" ng-model="newJob.Name" />
                </div>
                <div class="form-group">
                    New Job Group:<br />
                    <input type="text" class="form-control" ng-model="newJob.Group" />
                </div>
            </div>
        </div>

        <div id="cronEditorDialog" style="width:500px; height:350px;">
            <div class="container-fluid bottom_margin_10">
                <h3>Scheduler editor</h3>

                <div class="well well-sm">
                    Note: remember that the time is in <b>UTC</b>.
                </div>
                <div class="separator-4"></div>

                <div id='cronEditorDialogCtrl'></div>

                <div class="separator-16"></div>
                <b>Selected cron text: </b> <span id="cronEditorDialogCtrlText"></span>
                <div class="separator-4"></div>
            </div>
        </div>
    </div>
</div>


@section scripts {
    <script type="text/javascript">
        var jobHelper = {
            //hideMessage: function () {
            //    $('#status').hide();
            //},
            //showMessage: function (msg, evtType) {
            //    $('#status').html(msg)
            //        .toggleClass('alert', true)
            //        .toggleClass('alert-success', evtType === "success")
            //        .toggleClass('alert-danger', evtType === "error")
            //        .toggleClass('alert-warning', evtType === "warning")
            //        .toggleClass('alert-info', evtType || 'info' === "info")
            //        .show();
            //}
            actionCount: function (job) {
                function _count(action) {
                    if (!action) { return 0; }
                    var c = 1, i;
                    if (action.Actions) {
                        for (i = 0; i < action.Actions.length; i++) {
                            c += _count(action.Actions[i]);
                        }
                    }
                    return c;
                }
                if (!job) { return 0; }
                return _count(job.RootAction);
            }
        };

        //** angularJs initialization **
        var ng_app = angular.module('app', ['ui.bootstrap.datetimepicker', 'ui.grid', 'ui.grid.selection', 'ui.grid.autoResize', 'ui.grid.resizeColumns']);
        ng_app.directive('ngSelect2Bind', ['$q', '$timeout', ngSelect2BindDirective]);

        //** angularJs page main controller **
        ng_app.controller('mainController', function ($scope, $http, $timeout) {
            //** angularJs initialization **
            $scope.status = false;
            $scope.message = "loading...";
            $scope.modules = {};

            //** methods and behaviors **
            $scope.executeQuery = function (url, operation, data, onsuccess, onerror) {
                var p = {
                    op: operation,
                    data: data
                };
                simpleDialog.loading();
                return $.ajax({
                    url: url,
                    cache: false,
                    async: true,
                    type: 'POST',
                    dataType: "json",
                    data: angular.toJson(p),
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {
                        if (data && data.status) {
                            simpleDialog.close();
                            if (typeof onsuccess == 'function') {
                                $timeout(function () {
                                    onsuccess(data.result);
                                });
                            }
                        } else {
                            if (data && data.message) {
                                simpleDialog.warning(data.message);
                            } else {
                                simpleDialog.error();
                            }
                            if (typeof onerror == 'function') {
                                $timeout(function () {
                                    onerror();
                                });
                            }
                        }
                    },
                    error: function () {
                        simpleDialog.error();
                        if (typeof onerror == 'function') {
                            $timeout(function () {
                                onerror();
                            });
                        }
                    }
                });
            };

            $scope.executeJobsQuery = function (operation, data, onsuccess, onerror) {
                return $scope.executeQuery("./jobs/query", operation, data, onsuccess, onerror);
            };

            $scope.executeModulesQuery = function (operation, data, onsuccess, onerror) {
                return $scope.executeQuery("./modules/query", operation, data, onsuccess, onerror);
            };

            $scope.saveCurrentJob = function () {
                // try get selected job
                var job = $scope.selectedJob;
                if (!job) {
                    simpleDialog.warning('No job selected!');
                    return;
                }
                // if mode is json edit, we should try a different approach
                if ($scope.currentEditMode === 'json') {
                    job = $scope.parseJobFromText();
                }
                // save
                if (job) {
                    $scope.saveJob(job);
                }
            };

            $scope.saveJob = function (job) {
                $scope.executeJobsQuery('save',
                            { 'job': angular.toJson(job) },
                            function (data) {
                                $scope.refresh();
                                simpleDialog.success('Job saved!');
                            });
            };

            $scope.removeJob = function (job) {
                simpleDialog.warning('Remove job <b>' + job.Name + '</b> ?<br/><br/>' + $scope.getSimpleJobDetails(job), function () {
                    $scope.executeJobsQuery('remove', { 'jobId': job.Id.toString() },
                        function (data) {
                            $scope.refresh();
                            simpleDialog.success('Job removed!<br/><br/>' + $scope.getSimpleJobDetails(job));
                        });
                });
            };

            $scope.playJob = function (job) {
                simpleDialog.warning('Execute job <b>' + job.Name + '</b> ?<br/><br/>' + $scope.getSimpleJobDetails(job), function () {
                    $scope.executeJobsQuery('play', { 'jobId': job.Id.toString() },
                        function (data) {
                            $scope.refresh();
                            simpleDialog.success('Job executing...<br/><br/>' + $scope.getSimpleJobDetails(job));
                        });
                });
            };

            $scope.getSimpleJobDetails = function (job) {
                var jobDetails = '<ul><li>Job Id: {0}</li><li>Job Name: {1}</li><li>Job Group: {2}</li></ul>';
                return jobDetails.replace('{0}', job.Id).replace('{1}', job.Name).replace('{2}', job.Group);
            };

            $scope.showMessage = function (message, isError) {
                $scope.status = !isError;
                $scope.message = message || "";
            };

            $scope.clearItem = function () {
                $scope.selectedJob = null;
                $scope.jobTextContent = '';
            };

            $scope.selectItem = function (item) {
                if (item) {
                    if (!item.Options) { item.Options = {}; }
                    if (!item.RootAction) { item.RootAction = {}; }
                    if (!item.RootAction.Options) { item.RootAction.Options = {}; }

                    $scope.selectedJob = item;
                    $scope.refreshEditAreaJson();
                } else {
                    $scope.clearItem();
                }
            };

            $scope.changeEditAreaMode = function (mode) {
                if (!$scope.selectedJob) { return; }
                $scope.currentEditMode = mode;
                if (mode === 'json') {
                    $scope.refreshEditAreaJson();
                } else {
                    $scope.refreshEditAreaForm();
                }
            };

            $scope.refreshEditAreaJson = function () {
                if ($scope.selectedJob) {
                    $scope.jobTextContent = angular.toJson($scope.selectedJob, true);
                }
            };

            $scope.refreshEditAreaForm = function () {
                if ($scope.selectedJob) {
                    var job = $scope.parseJobFromText();
                    if (job) {
                        $scope.selectedJob = job;
                    }
                }
            };

            $scope.refresh = function () {
                $scope.showMessage("loading...");

                $scope.executeJobsQuery('load', null,
                    function (data) {
                        $scope.showMessage('data loaded!');
                        var lastSelectedItem = $scope.selectedJob;
                        $scope.dataTableJobs.data = data;
                        // refresh selected item
                        $timeout(function () {
                            if (lastSelectedItem) {
                                for (var i = 0, len = data.length; i < len; i++) {
                                    if ((!!lastSelectedItem.Id && data[i].Id === lastSelectedItem.Id) ||
                                        (!!lastSelectedItem.Name && data[i].Name === lastSelectedItem.Name)) {
                                        $scope.dataTableJobsApi.selection.selectRow($scope.dataTableJobs.data[i]);
                                        break;
                                    }
                                }
                            }
                        });
                    }, function () {
                        $scope.clearItem();
                        $scope.showMessage("Loading failled!", true);
                    });
            };

            $scope.editCronScheduler = function (index) {
                if (!$scope.selectedJob) { return; }
                if (!$scope.selectedJob.Scheduler) { $scope.selectedJob.Scheduler = []; }
                if (!$scope.selectedJob.Scheduler[index]) { $scope.selectedJob.Scheduler[index] = '0 5 * * *' };
                $('#cronEditorDialogCtrl').cron('value', $scope.selectedJob.Scheduler[index]);
                simpleDialog.info($('#cronEditorDialog'), function () {
                    $timeout(function () { $scope.selectedJob.Scheduler[index] = $('#cronEditorDialogCtrl').cron("value"); });
                });
            };

            $scope.createJob = function () {
                return {
                    Name: '',
                    Group: '',
                    Enabled: true,
                    Options: {},
                    RootAction: {
                        Module: '',
                        Options: {}
                    }
                };
            };

            $scope.addNewJob = function () {
                $scope.newJob = $scope.createJob();
                // show job creation dialog
                simpleDialog.info($('#addNewJobDialog'), function () {
                    $timeout(function () {
                        // set new job
                        $scope.selectItem($scope.newJob);
                        // scroll page to edit area
                        $('html, body').animate({
                            scrollTop: $("#nav-jobDetails").offset().top
                        }, 500);
                    });
                });
            };

            $scope.addNewScheduler = function () {
                if (!$scope.selectedJob) { return; }
                if (!$scope.selectedJob.Scheduler) { $scope.selectedJob.Scheduler = []; }
                $scope.selectedJob.Scheduler[$scope.selectedJob.Scheduler.length] = '';
            };

            $scope.removeScheduler = function (index) {
                if (!$scope.selectedJob) { return; }
                if (!$scope.selectedJob.Scheduler) { $scope.selectedJob.Scheduler = []; }
                $scope.selectedJob.Scheduler.splice(index, 1);
            };

            $scope.addJobEvent = function () {
                if (!$scope.selectedJob) { return; }
                if (!$scope.selectedJob.Events) { $scope.selectedJob.Events = []; }
                $scope.selectedJob.Events[$scope.selectedJob.Events.length] = '';
            };

            $scope.removeJobEvent = function (index) {
                if (!$scope.selectedJob) { return; }
                if (!$scope.selectedJob.Events) { $scope.selectedJob.Events = []; }
                $scope.selectedJob.Events.splice(index, 1);
            };

            $scope.getTableJobsHeight = function () {
                var rowHeight = 36, headerHeight = 36, totalHeight;
                // calculate current heigth
                totalHeight = ($scope.dataTableJobs.data.length || 1) * 36 + 36;
                // max heigth
                if (totalHeight > 500) { totalHeight = 500; }
                // create style
                return { height: totalHeight + "px" };
            };

            $scope.parseJobFromText = function () {
                var job = null;
                try {
                    job = JSON.parse($scope.jobTextContent);
                } catch (e) {
                    simpleDialog.error('Error parsing Job, check the JSON syntax.<br/>' + e.message);
                    return null;
                }

                // check for old syntax and try to update
                if (!!job.Jobs) {

                    function copyBasicData(j) {
                        var c = $scope.createJob();
                        c.Id = j.Id;
                        c.Name = j.Name;
                        c.Group = j.Domain;
                        c.Description = j.Description;
                        if (j.Comments)
                            c.Description = (c.Description || '') + '\n' + j.Comments;
                        c.Enabled = j.Enabled;
                        c.Options = j.Options || {};
                        if (j.Jobs && j.Jobs.length > 0) {
                            j = j.Jobs[0];
                            c.Enabled = j.Enabled;
                            if (typeof j.Scheduler === 'string') {
                                c.Scheduler = [j.Scheduler];
                            } else {
                                c.Scheduler = j.Scheduler || [];
                            }
                            c.LastExecution = j.LastExecution;
                            c.NextExecution = j.NextExecution;

                            if (j.Events) {
                                c.Events = j.Events;
                            }
                            if (j.Comments)
                                c.Description = (c.Description || '') + '\n' + j.Comments;
                            if (j.Options) {
                                c.Options = jQuery.extend({}, c.Options, j.Options);
                            }

                            c.RootAction = copyAction(j.RootAction);
                        }

                        return c;
                    }

                    function copyAction(a) {
                        var a2 = {
                            Type: a.Type || 0,
                            Module: a.PluginId || '',
                            Options: a.Options || {},
                            Comments: a.Comments
                        };
                        // copy sub actions
                        if (a.Actions) {
                            a2.Actions = [];
                            for (var i = 0; i < a.Actions.length; i++) {
                                a2.push(copyAction(a.Actions[i]));
                            }
                        }
                        return a2;
                    }

                    var oldJob = job;
                    if (job.Jobs.length > 1) {
                        simpleDialog.error('Error updating Job format: multiple Jobs found.<br/>Please split these jobs manually and submit each again.');
                        return;
                    }

                    job = copyBasicData(oldJob);
                    // update UI
                    $scope.selectItem(job);
                }

                return job;
            };

            $scope.modules.getNames = function () {
                return $scope.modules.names;
            };

            $scope.modules.loadModules = function () {
                return $scope.executeModulesQuery('load', null, function (data) {
                    $scope.modules.list = data;
                    $scope.modules.names = Lazy($scope.modules.list).map(function (c) { return c.FullName; }).uniq().sort().toArray();
                });
            };

            $scope.modules.getModule = function (name) {
                var l = $scope.modules.list || [], i = 0;
                for (; i < l.length; i++) {
                    if (l[i].FullName === name) {
                        return l[i];
                    }
                }
                return null;
            };

            $scope.modules.getDescription = function (module) {
                var m = $scope.modules.getModule(module);
                return m != null ? m.Description : '';
            };

            //** UI components configuration **
            (function () {
                // table configuration
                $scope.dataTableJobs = {
                    appScopeProvider: $scope,
                    enableHorizontalScrollbar: 0,
                    enableVerticalScrollbar: 0,
                    enableGridMenu: false,
                    rowHeight: 36,
                    multiSelect: false,
                    noUnselect: true,
                    enableRowSelection: true,
                    enableSelectionBatchEvent: false,
                    enableSelectAll: false,
                    enableRowHeaderSelection: false,
                    onRegisterApi: function (gridApi) {
                        $scope.dataTableJobsApi = gridApi;
                        gridApi.selection.on.rowSelectionChanged($scope, function (row) {
                            if (row.isSelected) {
                                $scope.selectItem(row.entity);
                            } else {
                                $scope.clearItem();
                            }
                        });
                    },
                    columnDefs: [
                            { name: 'Id', field: "Id", resizable: true },
                            { name: 'Name', field: "Name", resizable: true },
                            { name: 'Group', field: "Group", resizable: true },
                            { name: 'Description', field: "Description", resizable: true },
                            { name: 'Enabled', field: "Enabled", resizable: true },
                            { name: 'Actions', resizable: true, cellTemplate: '<div>{{ jobHelper.actionCount(row.entity) }}</div>' },
                            {
                                name: 'Actions', displayName: '', resizable: true, enableColumnMenu: false, enableSorting: false, cellTemplate:
                                           '<div><button type="button" role="button" ng-click="grid.appScope.playJob(row.entity)" class="btn btn-default btn-small margin-horizontal-2"><i class="fa fa-play"></i></button>' +
                                           '<button type="button" role="button" ng-click="grid.appScope.removeJob(row.entity)" class="btn btn-default btn-small margin-horizontal-2"><i class="fa fa-trash-o text-danger"></i></button></div>'
                            }
                    ],
                    data: []
                };

                $('#editAreaNavTabs a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
                    $timeout(function () {
                        if (e.target.href.split('#')[1] === 'editAsJson') {
                            $scope.changeEditAreaMode('json');
                        } else {
                            $scope.changeEditAreaMode('form');
                        }
                    });
                });

                $('#cronEditorDialogCtrl').cron({
                    initial: "*/5 * * * *",
                    onChange: function () {
                        $('#cronEditorDialogCtrlText').text($(this).cron("value"));
                    },
                    useGentleSelect: true
                });

                $scope.selectItem($scope.createJob());

                $scope.$watch('selectedJob.RootAction.Module', function () {
                    var module = $scope.selectedJob.RootAction.Module;
                    $scope.modules.selected = $scope.modules.getModule(module);

                    $scope.modules.selectedText = '';
                    $scope.modules.selectedParameters = '';
                    if ($scope.modules.selected) {
                        $scope.modules.selectedText = $scope.modules.selected.Description;
                        $scope.modules.selectedParameters = Lazy($scope.modules.selected.Parameters || []).map(function (c) { return "{0} ({1}) - {2} - {3}".replace('{0}', c.Name || '').replace('{1}', c.Type || '').replace('{2}', c.IsRequired ? 'REQUIRED' : 'OPTIONAL').replace('{3}', c.Description || '') }).toArray();
                    }
                })

                $scope.modules.loadModules();
                $scope.refresh();
            })();
        });


        // initialization
        //$(document).ready(function () {
        //    angular.element('#mainController').scope().refresh();
        //});
    </script>
}